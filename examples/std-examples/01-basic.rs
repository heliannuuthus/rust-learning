use std::thread::spawn;

/// ## 标准库
///
/// ### 装箱、堆、栈
///
/// > Rust 中所有的值都是 栈 默认分配的，通过创建 Box<T> 可以直接在堆上分配内存
///
/// * Box 是一个智能指针，指向堆分配的 `T` 类型的值
/// * 当 Box 离开作用域的时候会调用析构函数，对象会被销毁
/// * 被装箱的变量可以用 `*` 解引用符号拆箱
///
/// ### 动态数组 vector
///
/// > vector 由三个部分组成，指向数据的指针（point），vector 的长度（length）和容量（capacity）
///
/// * vector 大小可变，当长度 < 容量时随意变化（类似 slice）
/// * vector 是采用预先分配容量大小的内存，当长度达到容量阈值时会发生扩容
///
/// ### 可变字符串 String
///
/// > Rust 中有两种字符串 `Strng` 和 `&str`
///
/// |name|String|&str|
/// |:-------:|:------------:|:---------:|
/// |储存方式|`Vec\<u8\>`|`&\[u8\]`|
/// |储存位置|堆|堆|
/// |特征|可增长，不是零结尾|可以用来查看 `String` 内容|
///
/// * String 在内存表现形式是（Vec<u8>），但是保证了一定是一个有效的 UTF-8 序列
/// * String 是堆分配的，且可增长，不是零结尾
///
/// * &str 总是指向有效的 UTF-8 slice（&\[u8\]）可用来查看 `String` 内容
/// * 一定是 String 的一部分或者是全部引用
///
